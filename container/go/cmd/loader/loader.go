// Copyright 2015 The Bazel Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/////////////////////////////////////////////////////////////////////
// This rule imports an image from a `docker save` tarball using the go_containerregistry.
//
// Extracts the tarball, examines the layers, and creates a container_import
// target for use with container_image

package main

import (
	"flag"
	"log"
	ospkg "os"
	"path"
	"path/filepath"
	"strconv"

	"github.com/bazelbuild/rules_docker/container/go/pkg/oci"
	v1 "github.com/google/go-containerregistry/pkg/v1"
	"github.com/google/go-containerregistry/pkg/v1/tarball"
	"github.com/pkg/errors"
)

var (
	outDir     = flag.String("directory", "", "Where to save the image's files.")
	imgTarball = flag.String("tarball", "", "The path to the tarball to load.")
)

// generateSym creates symbolic links to the config.json and .tar.gz layers
// for use with container_import rule.
func generateSym(img v1.Image, dstPath string) error {
	targetDir := path.Join(dstPath, "blobs/sha256")
	symlinkDir := path.Join(filepath.Dir(dstPath), "image")

	// symlink for config.json.
	var config v1.Hash
	var err error
	if config, err = img.ConfigName(); err != nil {
		return errors.Wrapf(err, "failed to get the config file's hash information for image")
	}
	configDir := path.Join(targetDir, config.Hex)
	dstLink := path.Join(symlinkDir, "config.json")
	if _, err := ospkg.Lstat(dstLink); err == nil {
		ospkg.Remove(dstLink)
	}
	if err := ospkg.Symlink(configDir, dstLink); err != nil {
		return errors.Wrapf(err, "failed to create symbolic link to config.json at %s", configDir)
	}

	// symlink for the layers.
	var layers []v1.Layer
	if layers, err = img.Layers(); err != nil {
		return errors.Wrapf(err, "failed to get the layers for image")
	}
	var layersDir string
	for i, layer := range layers {
		var layerDigest v1.Hash
		if layerDigest, err = layer.Digest(); err != nil {
			return errors.Wrapf(err, "failed to get layer digest")
		}
		layersDir = path.Join(targetDir, layerDigest.Hex)
		out := strconv.Itoa(i) + ".tar.gz"
		dstLink = path.Join(symlinkDir, out)
		if _, err := ospkg.Lstat(dstLink); err == nil {
			ospkg.Remove(dstLink)
		}
		if err = ospkg.Symlink(layersDir, dstLink); err != nil {
			return errors.Wrapf(err, "failed to create symbolic link to layer")
		}
	}

	return nil
}

// load loads a docker image tarball generated by docker save from path <dir>.
func load(tar, dir string) error {
	img, err := tarball.ImageFromPath(tar, nil)
	if err != nil {
		return errors.Wrapf(err, "failed to read docker image tarball from %q", dir)
	}

	if err = oci.Write(img, dir); err != nil {
		return errors.Wrapf(err, "failed to write image to OCI layout at path %s", dir)
	}

	if err := generateSym(img, dir); err != nil {
		return errors.Wrapf(err, "failed to generate symbolic links to pulled image at %s", dir)
	}

	return nil
}

func main() {
	flag.Parse()
	log.Println("Running the Image Loader to load the image tarball...")

	if *outDir == "" {
		log.Fatalln("Required option -directory was not specified.")
	}
	if *imgTarball == "" {
		log.Fatalln("Required option -tarball was not specified.")
	}

	if err := load(*imgTarball, *outDir); err != nil {
		log.Fatalf("Failed to load tarball into OCI format: %v", err)
	}

	log.Printf("Successfully wrote docker image tarball to %q", *outDir)
}
