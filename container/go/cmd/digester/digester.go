// Copyright 2017 The Bazel Authors. All rights reserved.

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at

//    http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License/
////////////////////////////////////
//This binary implements the ability to load a docker image, calculate its image manifest sha256 hash and output a digest file.
package main

import (
	"flag"
	"log"

	"github.com/bazelbuild/rules_docker/container/go/pkg/compat"
	"github.com/bazelbuild/rules_docker/container/go/pkg/utils"
)

var (
	dst        = flag.String("dst", "", "The destination location of the digest file to write to.")
	imgTarball = flag.String("tarball", "", "Path to the image tarball as generated by docker save. Only compatible with --format=Docker.")
	imgIndex   = flag.String("index", "", "Path to the image index.json. Required when --format is OCI.")
	imgConfig  = flag.String("config", "", "Path to the image config.json. Required when --format is Docker.")
	format     = flag.String("format", "", "The format of the source image, (OCI or Docker).")
	layers     utils.ArrayStringFlags
)

func main() {
	flag.Var(&layers, "layer", "The list of paths to the compressed layers of this docker image, only with --format=Docker.")
	flag.Parse()

	if *dst == "" {
		log.Fatalln("Required option -dst was not specified.")
	}
	if *format == "" {
		log.Fatalln("Required option -format was not specified.")
	}
	if *format == "Docker" {
		if *imgConfig == "" && *imgTarball == "" {
			log.Fatalln("One of --config or --tarball must be specified when --format is Docker.")
		}
		if *imgConfig != "" && *imgTarball != "" {
			log.Fatalln("Only one of --config or --tarball must be specifed instead of both.")
		}
	}
	if *format == "OCI" && *imgIndex == "" {
		log.Fatalln("--index is required when --format=OCI.")
	}

	img, err := utils.ReadImage(*format, *imgConfig, *imgIndex, *imgTarball, layers)
	if err != nil {
		log.Fatalf("Error reading image: %v", err)
	}

	if err = compat.WriteDigest(img, *dst); err != nil {
		log.Fatalf("Error outputting digest file to %s: %v", *dst, err)
	}
}
